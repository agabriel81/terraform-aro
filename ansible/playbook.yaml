- name: Day-1 Configure ARO cluster Playbook
  hosts: localhost
  vars_files:
    - vars/var_file.yaml
  module_defaults:
    redhat.openshift.openshift_auth:
      host: "{{ aro_api }}"
      ca_cert: ca.pem
      validate_certs: no
  tasks:
    - name: Authenticate to OpenShift cluster and gell a list of all pods from any namespace
      block:
        # It's good practice to store login credentials in a secure vault and not
        # directly in playbooks.
        - name: Include 'openshift_password.yml'
          ansible.builtin.include_vars: openshift_password.yml

        - name: Log in (obtain access token)
          redhat.openshift.openshift_auth:
            username: kubeadmin
            password: "{{ openshift_admin_password }}"
          register: openshift_auth_results

        - name: Create Projects by reading the definition from a local file
          redhat.openshift.k8s:
            state: present
            src: ../cluster_conf/projects.yaml

        - name: Create a IngressController by reading the definition from a local file
          redhat.openshift.k8s:
            state: present
            src: ../cluster_conf/ingresscontroller.yaml

        - name: Create OperatorGroups by reading the definition from a local file
          redhat.openshift.k8s:
            state: present
            src: ../cluster_conf/operatorgroup.yaml

        - name: Create Subscriptions by reading the definition from a local file
          redhat.openshift.k8s:
            state: present
            src: ../cluster_conf/subscriptions.yaml

        - name: Create ServiceMeshControlPlane by reading the definition from a local file
          redhat.openshift.k8s:
            state: present
            src: ../cluster_conf/smcp.yaml
            wait: true

        - name: Create ServiceMeshMemberRole by reading the definition from a local file
          redhat.openshift.k8s:
            state: present
            src: ../cluster_conf/smmr.yaml
            wait: true

        - name: Create BlueGreen Roles resources by reading the definition from a local file
          redhat.openshift.k8s:
            state: present
            src: ../workload_conf/roles.yaml

        - name: Create BlueGreen application resources by reading the definition from a local file
          redhat.openshift.k8s:
            state: present
            src: ../workload_conf/bluegreen.yaml

        - name: Create BlueGreen Gateway resources by reading the definition from a local file
          redhat.openshift.k8s:
            state: present
            src: ../workload_conf/gateway.yaml

        - name: Create BlueGreen VirtualService resources by reading the definition from a local file
          redhat.openshift.k8s:
            state: present
            src: ../workload_conf/virtualservice.yaml

        - name: Create BlueGreen DestinationRule resources by reading the definition from a local file
          redhat.openshift.k8s:
            state: present
            src: ../workload_conf/destinationrules.yaml

        - name: Create BlueGreen Route resources by reading the definition from a local file
          redhat.openshift.k8s:
            state: present
            src: ../workload_conf/route.yaml

        - name: Get an existing Service object
          kubernetes.core.k8s_info:
            api_version: v1
            kind: Service
            name: router-custom
            namespace: openshift-ingress
          register: custom_ingresscontroller_svc

        - name: Debug
          ansible.builtin.debug:
            msg: "{{ custom_ingresscontroller_svc.resources[0].status.loadBalancer.ingress | selectattr('ip', 'defined') | map(attribute='ip') }}"

        - name: Set Facts IP
          set_fact :
            ip: "{{ custom_ingresscontroller_svc.resources[0].status.loadBalancer.ingress | selectattr('ip', 'defined') | map(attribute='ip') }}"

        - name: ensure an A record set with multiple records
          azure.azcollection.azure_rm_privatednszone.azure_rm_privatednsrecordset:
            resource_group: "{{ azure_resource_group }}"
            relative_name: "*"
            zone_name: "{{ privatedns_domain }}"
            record_type: A
            records:
              - entry: "{{ ip[0] }}"

      always:
        - name: If login succeeded, try to log out (revoke access token)
          when: openshift_auth_results.openshift_auth.api_key is defined
          redhat.openshift.openshift_auth:
            state: absent
            api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
